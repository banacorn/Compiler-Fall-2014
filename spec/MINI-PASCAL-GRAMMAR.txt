Mini PASCAL Grammar, 20100606
  

program ::= program id ( identifier_list ) ;
  	    declarations
	    subprogram_declarations
	    compound_statement
	    .


identifier_list ::= id
	| identifier_list , id


declarations ::= declarations var identifier_list : type ;
	| lambda


type ::= standard_type
	| array [ num .. num ] of type


standard_type ::= integer
	| real
        | string


subprogram_declarations ::=
	subprogram_declarations subprogram_declaration ;
	| lambda


subprogram_declaration ::=
	subprogram_head 
	declarations 			
        compound_statement

subprogram_head ::= function id arguments : standard_type ;
	| procedure id arguments ;


arguments ::= ( parameter_list )
	| lambda


parameter_list ::= identifier_list : type
	| parameter_list ; identifier_list : type


compound_statement ::= begin
		       optional_statements
		       end


optional_statements ::= statement_list
	| lambda


statement_list ::= statement
	| statement_list ; statement


statement ::= variable := expression
	| procedure_statement
	| compound_statement
	| if expression then statement else statement
	| while expression do statement


variable ::= id tail

tail     ::= [ expression ] tail
	| lambda 


procedure_statement ::= id
	| id ( expression_list )


expression_list ::= expression
	| expression_list , expression


expression ::= simple_expression
	| simple_expression relop simple_expression


simple_expression ::= term
	| simple_expression addop term


term ::= factor
	| term mulop factor


factor ::= id tail
	| id ( expression_list )
	| num
	| ( expression )
	| not factor


addop ::= + | -


mulop ::= * | /



relop ::= <
	| >
	| =
	| <=
	| >=
	| !=

%% end of grammar